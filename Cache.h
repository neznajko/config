////////////////////////////////////////////////////////////////
# pragma once
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include "defs.h"
# include <unordered_map>
////////////////////////////////////////////////////////////////
using std::unordered_map;
////////////////////////////////////////////////////////////////
template <typename Key,typename Value>
class Cache {
public:
    bool haskey( const Key& key ){
        return umap.count( key );
    }
protected:
    unordered_map <Key,Value> umap{}; // tha'ts
    virtual Value defaultvalue() const {
        return {};
    }
    void defaultcons( const Key& key ){
        if( haskey( key ) == false ){
            umap[ key ] = defaultvalue();
        }
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class PerftCache: public Cache <u64,vector <u64>> {
    static const int MAXDEPTH = 8;
protected:
    vector <u64> defaultvalue() const override {
        return vector <u64> ( MAXDEPTH );
    }
public:
    auto getvalue( u64 hash, int depth ){
        defaultcons( hash );
        return umap[ hash ][ depth ];
    }
    void inc( u64 hash, int depth ){
        defaultcons( hash );
        ++umap[ hash ][ depth ];
    }
    void setvalue( u64 value, u64 hash, int depth ){
        umap[ hash ][ depth ] = value;
    }
    friend ostream& 
    operator <<( ostream& _, const PerftCache& cache );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
