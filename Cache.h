////////////////////////////////////////////////////////////////
# pragma once
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include "defs.h"
# include <unordered_map>
////////////////////////////////////////////////////////////////
using std::unordered_map;
////////////////////////////////////////////////////////////////
template <typename Key,typename Value>
class Cache {
public:
    bool haskey( const Key& key ){
        return umap.count( key ) > 0;
    }
protected:
    unordered_map <Key,Value> umap{}; // tha'ts
    virtual Value defaultvalue() const {
        return {};
    }
    void defaultcons( const Key& key ){
        if( haskey( key ) == false ){
            umap[ key ] = defaultvalue();
        }
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class PerftCache: public Cache <u64,vector <u64>> {
    static const int MAXDEPTH = 8;
protected:
    vector <u64> defaultvalue() const override {
        return vector <u64> ( MAXDEPTH );
    }
public:
    auto getvalue( u64 hash, int depth ){
        defaultcons( hash );
        return umap[ hash ][ depth ];
    }
    void inc( u64 hash, int depth ){
        defaultcons( hash );
        ++umap[ hash ][ depth ];
    }
    void setvalue( u64 n, u64 hash, int depth ){
        umap[ hash ][ depth ] = n;
    }
    friend ostream& 
    operator <<( ostream& _, const PerftCache& cache );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <array>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using std::array;
////////////////////////////////////////////////////////////////
class PerftCache_ {
    typedef u64            Key;
    typedef array <u64, 8> Value;
public:
    auto get( Key hash, int depth ){
        return umap[ hash ][ depth ];
    }
    void set( Key hash, int depth, u64 n ){
        umap[ hash ][ depth ] = n;
    }
private:
    unordered_map <Key, Value> umap;
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
