////////////////////////////////////////////////////////////////
# include "ComsatStation.h"
# include <regex>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////// //////////////////////////////////////////
///////////////////// ///////////////////////////////////////////
//////////////////// ////////////////////////////////////////////
/////////////////// /////////////////////////////////////////////
const string ComsatStation::DEFAULTFEN {
    "N6K/8/5N2/n7/8/6n1/8/k7 b - - 0 1"
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string ComsatStation::fetch( const string& prompt )
{
    cout << prompt << " ";
    string nput;
    getline( cin, nput );
    return nput;
}
////////////////////////////////////////////////////////////////
void ComsatStation::Launch()
{
    while( true ){
        node->draw_board();
        cout << node << endl;
        string nput = fetch( ">" );
        if( nput.empty() ){ // Ctrl-C
            break;
        } else {
            exec( Node::split( nput ));
        }
    }
}
////////////////////////////////////////////////////////////////
void ComsatStation::exec( const vector <string> &args )
{
    string com = args[ 0 ];
    if( commands_map.count( com )){
        commands_map[ com ]->exec( args );
    } else {
        if( make_move( com ) == false ){
            cout << com << ": unknown command\n";
        }
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// e4e5
bool ComsatStation::make_move( const string& s )
{
    static const regex MOVE_REGEX { 
        "([a-h][1-8])([a-h][1-8])(.*)"
    };
    smatch move_match;
    if(! regex_match( s, move_match, MOVE_REGEX )){
        return false;
    }
    const string src_sqr = move_match[ 1 ].str();
    const string dst_sqr = move_match[ 2 ].str();
    ofst_t src = Board::get_ofst( src_sqr );
    ofst_t dst = Board::get_ofst( dst_sqr );
    const Unit* u = node->get_unit( dst_sqr ); 
    move_t type = u->not_nil() ? CRON : MOVE;
    Move mv{ type, src, dst };
    movestk.push_back( mv );
    node->make_move( mv );
    return true;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
