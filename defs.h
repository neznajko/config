////////////////////////////////////////////////////////////////
# pragma once
////////////////////////////////////////////////////////////////
enum { BLACK, WHITE, RED, BLUE };
enum { QSIDE, KSIDE, CENTER };
enum { KING, QUEEN, ROOK, BISHOP, KNIGHT, PAWN, VOID, GUARD };
////////////////////////////////////////////////////////////////
typedef int ofst_t;
typedef int color_t;
typedef int fig_t;
typedef int move_t;
typedef long long i64_t;
////////////////////////////////////////////////////////////////
constexpr move_t MOVE{   0           };
constexpr move_t CRON{        1 << 0 };
constexpr move_t QUEEN_PMOT{  1 << 1 };
constexpr move_t ROOK__PMOT{  1 << 2 };
constexpr move_t BSHOP_PMOT{  1 << 3 };
constexpr move_t NIGHT_PMOT{  1 << 4 };
constexpr move_t SHOTCASL{    1 << 5 };
constexpr move_t LONGCASL{    1 << 6 };
constexpr move_t NPAS{        1 << 7 };
////////////////////////////////////////////////////////////////
# include <iostream>
# include <vector>
////////////////////////////////////////////////////////////////
using std::ostream;
using std::cout;
using std::endl;
using std::vector;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
template <typename T>
ostream& operator <<( ostream& _ , const vector <T> &vec ){
    _ << "[";
    if( vec.size()){
        _ << ' ';
        for( const T& u: vec ){
            _ << u << ' ';
        }
    }
    return _ << "]";
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
