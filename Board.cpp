////////////////////////////////////////////////////////////////
# include "Brush.h"
////////////////////////////////////////////////////////////////
ofst_t Board::get_ofst( const string& sqr )
{
    char f{ sqr[ 0 ]}; // e
    char r{ sqr[ 1 ]}; // 4
    int j{ f - 'a' + GUARD_WIDTH };
    int i{ PROMOTION_RANK[ BLACK ] - ( r - '1' )};
    return get_ofst( i, j );
}
////////////////////////////////////////////////////////////////
Board::Board() {
    static int N = WIDTH * HEIGHT;
    static const int MASK[] = {
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,
    };
    for( ofst_t j{}; j < N; ++j ){
        Unit* unit{ MASK[ j ] ? Unit::NOP : Unit::NIL };
        sqs.emplace_back( j, unit );
    }
}
///////////////////////////////////////////////////////////////=
ostream& operator <<( ostream& _ , const Board& board )
{
    for( int i = 0; i < Board::HEIGHT; ++i ){
        for( int j = 0; j < Board::WIDTH; ++j ){
            _ << board.get_unit( Board::get_ofst( i, j ));
        }
        _ << endl;
    }
    return _ ;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
